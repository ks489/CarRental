//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RentalCar.Client.MyVehicleService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyVehicleService.IVehicleService")]
    public interface IVehicleService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicleService/Test", ReplyAction="http://tempuri.org/IVehicleService/TestResponse")]
        string Test();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicleService/Test", ReplyAction="http://tempuri.org/IVehicleService/TestResponse")]
        System.Threading.Tasks.Task<string> TestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicleService/GetVehicle", ReplyAction="http://tempuri.org/IVehicleService/GetVehicleResponse")]
        RentalCar.Core.Models.VehicleDTO GetVehicle(string numberPlate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicleService/GetVehicle", ReplyAction="http://tempuri.org/IVehicleService/GetVehicleResponse")]
        System.Threading.Tasks.Task<RentalCar.Core.Models.VehicleDTO> GetVehicleAsync(string numberPlate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicleService/GetAvailableVehicles", ReplyAction="http://tempuri.org/IVehicleService/GetAvailableVehiclesResponse")]
        RentalCar.Core.Models.VehicleDTO[] GetAvailableVehicles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicleService/GetAvailableVehicles", ReplyAction="http://tempuri.org/IVehicleService/GetAvailableVehiclesResponse")]
        System.Threading.Tasks.Task<RentalCar.Core.Models.VehicleDTO[]> GetAvailableVehiclesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicleService/Create", ReplyAction="http://tempuri.org/IVehicleService/CreateResponse")]
        int Create(RentalCar.Core.Models.VehicleDTO vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IVehicleService/Create", ReplyAction="http://tempuri.org/IVehicleService/CreateResponse")]
        System.Threading.Tasks.Task<int> CreateAsync(RentalCar.Core.Models.VehicleDTO vehicle);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IVehicleServiceChannel : RentalCar.Client.MyVehicleService.IVehicleService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VehicleServiceClient : System.ServiceModel.ClientBase<RentalCar.Client.MyVehicleService.IVehicleService>, RentalCar.Client.MyVehicleService.IVehicleService {
        
        public VehicleServiceClient() {
        }
        
        public VehicleServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public VehicleServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VehicleServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public VehicleServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Test() {
            return base.Channel.Test();
        }
        
        public System.Threading.Tasks.Task<string> TestAsync() {
            return base.Channel.TestAsync();
        }
        
        public RentalCar.Core.Models.VehicleDTO GetVehicle(string numberPlate) {
            return base.Channel.GetVehicle(numberPlate);
        }
        
        public System.Threading.Tasks.Task<RentalCar.Core.Models.VehicleDTO> GetVehicleAsync(string numberPlate) {
            return base.Channel.GetVehicleAsync(numberPlate);
        }
        
        public RentalCar.Core.Models.VehicleDTO[] GetAvailableVehicles() {
            return base.Channel.GetAvailableVehicles();
        }
        
        public System.Threading.Tasks.Task<RentalCar.Core.Models.VehicleDTO[]> GetAvailableVehiclesAsync() {
            return base.Channel.GetAvailableVehiclesAsync();
        }
        
        public int Create(RentalCar.Core.Models.VehicleDTO vehicle) {
            return base.Channel.Create(vehicle);
        }
        
        public System.Threading.Tasks.Task<int> CreateAsync(RentalCar.Core.Models.VehicleDTO vehicle) {
            return base.Channel.CreateAsync(vehicle);
        }
    }
}
